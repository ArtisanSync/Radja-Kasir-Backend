generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  TRIAL
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

model SubscriptionPackage {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String 
  price       Decimal  @default(0.00)
  maxUsers    Int      @default(1)
  maxMembers  Int      @default(3)
  maxStores   Int      @default(1)
  features    Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscribe[]

  @@map("subscription_packages")
}

model Payment {
  id               String        @id @default(cuid())
  userId           String
  subscriptionId   String?
  orderId          String?
  merchantCode     String 
  reference        String        @unique
  paymentAmount    Decimal
  paymentMethod    String?
  merchantOrderId  String        @unique
  productDetail    String
  paymentUrl       String?
  returnUrl        String?
  callbackUrl      String?
  expiryPeriod     Int           @default(1440)
  signature        String?
  status           PaymentStatus @default(PENDING)
  statusMessage    String?
  paidAt           DateTime?
  expiredAt        DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscribe?    @relation(fields: [subscriptionId], references: [id])
  order        Order?        @relation(fields: [orderId], references: [id])

  @@index([userId])
  @@index([merchantOrderId])
  @@index([reference])
  @@map("payments")
}

model Unit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variants ProductVariant[]

  @@map("units")
}

model Category {
  id        String   @id @default(cuid())
  storeId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products Product[]

  @@index([storeId])
  @@map("categories")
}

model Customer {
  id        String   @id @default(cuid())
  storeId   String
  name      String
  whatsapp  String?
  phone     String?
  address   String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@map("customers")
}

model OrderDebt {
  id           String   @id @default(cuid())
  orderId      String
  storeId      String
  customerId   String?
  customerName String
  phone        String?
  totalAmount  Decimal  @default(0.00)
  paidAmount   Decimal  @default(0.00)
  remainingAmount Decimal @default(0.00)
  isPaid       Boolean  @default(false)
  dueDate      DateTime?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([orderId])
  @@index([storeId])
  @@map("order_debts")
}

model OrderDetail {
  id           String   @id @default(cuid())
  orderId      String
  variantId    String
  productName  String
  variantName  String   @default("Default")
  capitalPrice Decimal  @default(0.00)
  unitPrice    Decimal  @default(0.00)
  quantity     Int
  discount     Decimal  @default(0.00)
  total        Decimal  @default(0.00)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([variantId])
  @@map("order_details")
}

model OrderPayment {
  id            String   @id @default(cuid())
  orderId       String
  refNumber     String?
  discount      Int      @default(0)
  isPercent     Int      @default(0)
  amountReceive Int      @default(0)
  amountOrder   Int      @default(0)
  paymentMethod String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([orderId])
  @@map("order_payments")
}

model Order {
  id           String   @id @default(cuid())
  orderNumber  String   @unique
  storeId      String
  customerId   String?
  customerName String?
  orderType    String   @default("SALE")
  status       String   @default("DRAFT")
  notes        String?
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  store    Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  details  OrderDetail[]
  debts    OrderDebt[]
  payments Payment[]

  @@index([storeId])
  @@index([customerId])
  @@index([orderNumber])
  @@map("orders")
}

model ProductVariant {
  id              String   @id @default(cuid())
  productId       String
  unitId          String 
  image           String?
  name            String   @default("0")
  quantity        Int      @default(0)
  capitalPrice    Decimal  @default(0.00)
  price           Decimal  @default(0.00)
  tax             Int      @default(0)
  discountRp      Decimal  @default(0.00)
  discountPercent Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  unit    Unit    @relation(fields: [unitId], references: [id])

  @@index([productId])
  @@index([unitId])
  @@map("product_variants")
}

model Product {
  id         String   @id @default(cuid())
  categoryId String?
  storeId    String
  image      String?
  name       String
  code       String?  @unique
  brand      String?
  description String?
  isActive   Boolean  @default(true)
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  store    Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variants ProductVariant[]

  @@index([storeId])
  @@index([code])
  @@map("products")
}

model StoreSetting {
  id         String   @id @default(cuid())
  storeId    String   @unique
  tax        Decimal  @default(0.00)
  currency   String   @default("IDR")
  timezone   String   @default("Asia/Jakarta")
  receiptConfig Json?
  notifications Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_settings")
}

model Store {
  id          String   @id @default(cuid())
  userId      String
  name        String
  storeType   String?
  description String?
  address     String?
  phone       String?
  whatsapp    String?
  email       String?
  logo        String?
  stamp       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]
  customers  Customer[]
  products   Product[]
  orders     Order[]
  members    StoreMember[]
  settings   StoreSetting?

  @@index([userId])
  @@map("stores")
}

model StoreMember {
  id        String   @id @default(cuid())
  storeId   String
  userId    String
  role      String   @default("CASHIER")
  permissions Json?
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storeId, userId])
  @@index([storeId])
  @@index([userId])
  @@map("store_members")
}

model InviteCode {
  id           String      @id @default(cuid())
  storeId      String
  invitedBy    String
  invitedEmail String
  code         String      @unique
  role         String      @default("CASHIER")
  status       InviteStatus @default(PENDING)
  expiresAt    DateTime
  acceptedAt   DateTime?
  acceptedBy   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([storeId])
  @@index([code])
  @@map("invite_codes")
}

model Subscribe {
  id          String            @id @default(cuid())
  userId      String
  packageId   String
  status      SubscriptionStatus @default(TRIAL)
  startDate   DateTime          @default(now())
  endDate     DateTime
  isTrial     Boolean           @default(false)
  trialEndDate DateTime?
  autoRenew   Boolean           @default(false)
  cancelledAt DateTime?
  isNewUserPromo Boolean         @default(false)
  paidMonths     Int             @default(1)
  bonusMonths    Int             @default(0) 
  totalMonths    Int             @default(1)
  isUpgrade        Boolean       @default(false)
  previousPackageId String?

  firstReminderSent  Boolean       @default(false)
  secondReminderSent Boolean       @default(false)
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  package  SubscriptionPackage @relation(fields: [packageId], references: [id])
  payments Payment[]

  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  avatar          String?
  role            UserRole  @default(USER)
  phone           String?
  businessName    String?
  businessType    String? 
  businessAddress String?
  whatsapp        String?
  isActive        Boolean   @default(true)
  emailVerifiedAt DateTime?
  password        String
  rememberToken   String?
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  stores       Store[]
  storeMembers StoreMember[]
  subscriptions Subscribe[]
  payments     Payment[]

  @@map("users")
}